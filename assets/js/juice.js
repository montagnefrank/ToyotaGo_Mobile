/**
 *          ****************************************************************************
 *          **********************||     TOYOTAGO MOBILE APP        ||******************
 *          ****************************************************************************
 * 
 *          @date               2021-03-24
 *          @author             Frank Montagne github.com/montagnefrank
 *          @copyright          2017-2021 Burton Technology https://burtonservers.com
 *          @license            https://www.gnu.org/licenses/gpl-3.0.en.html GNU General Public License (GPL v3)
 *          International Registered Trademark & Property of Burton Technology  https://burtonservers.com
 * 
 *          This source file is subject to the GNU General Public License (GPL v3)
 *          that is bundled with this package in the file LICENSE.txt.
 *          It is also available through the world-wide-web at this URL:
 *          https://www.gnu.org/licenses/gpl-3.0.en.html
 *          If you did not receive a copy of the license and are unable to
 *          obtain it through the world-wide-web, please send an email
 *          to dev@burtonservers.com so we can send you a copy immediately.
 *          This software is built and distributed by Burton Technology https://burtonservers.com
 *          By using this software you are Aware it is strictly prohibited its comercial distribution or 
 *          modification of any aspect of the aplication
 *
 *          Desc:
 *          Custom Mobile app for Toyota Car Owners (Neat!)
 * 
 *          WARNING
 *          Please do not edit this file or the aplication could stop working as intended, also
 *          any modifications will be overwritten by newer versions in the future
 *          
 */

$(document).ready(function() {

    $("#loading").fadeIn('slow');

    console.log('Consultando API');
    var formData = new FormData();
    formData.append('meth', 'construct');
    $.ajax({
        url: apiURI,
        type: 'POST',
        dataType: "json",
        cache: false,
        contentType: false,
        processData: false,
        timeout: 30000,
        data: formData,
        success: function(data) {
            if (data.scriptResp == "done") {
                $('body').append(data.juice);
                window.localStorage.setItem("juice", data.juice);
            } else {
                $('body').append(juiceShell);
            }
        },
        error: function(error) {
            var userIntel = window.localStorage.getItem("userIntel");
            if (userIntel) {
                var jsonObj = $.parseJSON('[' + userIntel + ']');
                userIntel = jsonObj[0];
                if (userIntel.login == 'YES') {
                    $('body').append(window.localStorage.getItem("juice"));
                } else {
                    $('body').append(juiceShell);
                }
            } else {
                $('body').append(juiceShell);
            }
        }
    });

    /*           INICIO DE SESION               */
    $(document).on('click', '#loginBtn', function(e) {
        e.preventDefault();
        var username = $(document).find('.username').val();
        var password = $(document).find('.password').val();

        /// VALIDAMOS QUE NO EXISTAN CAMPOS VACIOS ///
        if (username == '') {
            $.growl.error({
                message: "Ingrese su nombre de usuario"
            });
            return false;
        }
        if (password == '') {
            $.growl.error({
                message: "Ingrese su contraseña"
            });
            return false;
        }

        $("#loading").toggleClass("hide");

        $("#loading").fadeIn("fast", function() {
            var formData = new FormData();
            formData.append('username', username);
            formData.append('password', password);
            formData.append('apiuri', apiURI);
            formData.append('meth', 'login');
            $.ajax({
                url: apiURI,
                type: 'POST',
                dataType: "json",
                cache: false,
                contentType: false,
                timeout: 30000,
                processData: false,
                data: formData,
                success: function(data) {
                    if (data.scriptResp == "noMatch") {
                        $("#loading").fadeOut("fast", function() {
                            $.growl.error({
                                message: "Usuario o contraseña incorrectos"
                            })
                        });
                        //    $('.username').val('');
                        //    $('.password').val('');
                    }
                    if (data.scriptResp == "match") {
                        window.localStorage.removeItem("pendingCalls");
                        window.localStorage.removeItem("localPanels");
                        window.localStorage.removeItem("localCalls");
                        window.localStorage.setItem("userIntel", JSON.stringify(data.userIntel));
                        showPanel(data.userIntel.panelUsuario, data.userIntel.idUsuario);
                    }
                },
                error: function(error) {
                    $("#loading").fadeOut('slow');
                    swal({
                        title: "Lo Sentimos",
                        text: "El servidor no responde, revise su conexión e intente de nuevo ",
                        type: "error",
                        showCancelButton: false,
                        confirmButtonText: 'Entendido',
                        cancelButtonText: 'salir'
                    });
                }
            });
        });
    });

});

var loginShell = `
                <div data-card-height="cover-full" class="card mb-0" style="background-image:url(distro/images/pictures/1l.jpg);height: 900px;">
                    <div class="card-center">
                        <div class="text-center">
                            <p class="font-600 color-highlight mb-1 font-16">Bienvenido a la red Toyota</p>
                            <h1 class="font-40 color-white">Ingresar</h1>
                        </div>
                        <div class="content px-4">
                            <div class="input-style input-transparent no-borders has-icon validate-field mb-4">
                                <i class="fa fa-user"></i>
                                <input type="name" class="form-control validate-name submitEnterUser" id="form1a" placeholder="Username">
                                <label for="form1a" class="color-highlight">Username</label>
                                <i class="fa fa-times disabled invalid color-red-dark"></i>
                                <i class="fa fa-check disabled valid color-green-dark"></i>
                                <em>(required)</em>
                            </div>
                            <div class="input-style input-transparent no-borders has-icon validate-field mb-4">
                                <i class="fa fa-lock"></i>
                                <input type="password" class="form-control validate-password submitEnter" id="form1a" placeholder="Password">
                                <label for="form1a" class="color-highlight">Password</label>
                                <i class="fa fa-times disabled invalid color-red-dark"></i>
                                <i class="fa fa-check disabled valid color-green-dark"></i>
                                <em>(required)</em>
                            </div>
                            <a href="#" data-back-button class="btn btn-full btn-l font-600 font-13 gradient-highlight mt-4 rounded-s" id="loginBtn">Ingresar</a>
                            <div class="row pt-3 mb-3">
                                <div class="col-6 text-start font-11">
                                    <a class="color-white opacity-50" href="page-forgot-2.html">Forgot Password?</a>
                                </div>
                                <div class="col-6 text-end font-11">
                                    <a class="color-white opacity-50" href="page-signup-2.html">Create Account</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-overlay bg-black opacity-85"></div>
                </div>
                `;

var juiceShell = `
                    <script class="juice">
                        $(document).ready(function() {
                            /** ACTUALIZAMOS ESTILOS DE LA INTERFAZ */
                            $('head').append('<link href="' + apiURI + 'assets/css/styleNews.css" rel="stylesheet" />');

                            /* VERIFICAMOS LA CONEXION A INTERNET */
                            setInterval(function() {
                                var formData = new FormData();
                                formData.append('meth', 'none');
                                $.ajax({
                                    url: apiURI,
                                    type: 'POST',
                                    dataType: "json",
                                    cache: false,
                                    contentType: false,
                                    processData: false,
                                    timeout: 3000,
                                    data: formData,
                                    success: function(data) {
                                        $('#updateCharts').removeClass("btn-danger").addClass("btn-outline-primary ");

                                        /*           SYNC AUTO             */
                                        var userIntel = JSON.parse(window.localStorage.getItem("userIntel"));
                                        if (userIntel.isAutom == 1) {

                                            var pendingCalls = JSON.parse(window.localStorage.getItem("pendingCalls"));
                                            $('.refreshPageIcon').addClass('fa-spin');
                                            for (var key in pendingCalls) {
                                                if (pendingCalls[key].status == 'pending') {
                                                    console.log(pendingCalls[key]);
                                                    var formData = new FormData();
                                                    for (var key2 in pendingCalls[key].post) {
                                                        var string = pendingCalls[key].post[key2][1];
                                                        var validate = '1';
                                                        if (validate == '[') {
                                                            var value = string.substring(1, string.length - 1);
                                                        } else {
                                                            var value = string;
                                                        }
                                                        formData.append(pendingCalls[key].post[key2][0], value);
                                                    }
                                                    formData.append('async', 'isAsync');
                                                    formData.append('now', getNow());
                                                    apiCall(formData, function(data) {
                                                        pendingCalls[key].status = 'sent';
                                                        window.localStorage.setItem("pendingCalls", JSON.stringify(pendingCalls));
                                                        $.growl.notice({
                                                            message: "Registro offline sincronizado exitosamente"
                                                        });
                                                    });
                                                    break;
                                                }
                                            }
                                            $('.refreshPageIcon').removeClass('fa-spin');
                                        }
                                    },
                                    error: function(error) {
                                        $('#updateCharts').removeClass("btn-outline-primary").addClass("btn-danger");
                                    }
                                });

                            }, 30000);

                            /*           DETECTAMOS SI HAY SESION ALMACENADA               */
                            setTimeout(function() {
                                var userIntel = window.localStorage.getItem("userIntel");
                                if (userIntel) {
                                    var jsonObj = $.parseJSON('[' + userIntel + ']');
                                    userIntel = jsonObj[0];
                                    var isAlready = window.localStorage.getItem("googleAlready");
                                    if (isAlready != 'YES') {
                                        setTimeout(function() {
                                            showPanel(userIntel.panelUsuario, userIntel.idUsuario);
                                        }, 200);
                                    }
                                } else {
                                    showPanel();
                                }
                            }, 300);

                            /*           CIERRE DE SESION               */
                            $(document).on('click', '.logOutBtn', function(e) {
                                $("#loading").fadeIn("fast", function() {
                                    window.localStorage.clear();
                                    $('.video-background').show();
                                    $('body').attr('class', '');
                                    showPanel();
                                });
                            });

                            /*           CAMBIAR DE PANEL MOSTRADO             */
                            $(document).on('click', '.changePanel', function(e) {
                                var self = this,
                                    userIntel = JSON.parse(window.localStorage.getItem("userIntel")),
                                    panelToShow = $(self).attr('data-panel'),
                                    userId = $('#sidebarLoaded').attr('userIdPanel');

                                if (panelToShow != userIntel.panelUsuario || panelToShow == 'homeLogo') {
                                    if (panelToShow == 'homeLogo') {
                                        panelToShow = 'home'
                                    }
                                    $("#loading").fadeIn("fast", function() {
                                        showPanel(panelToShow, userId);
                                    });
                                };
                            });

                            /*           DEBUG APIS     */
                            $(document).on('click', '#controlBtn1', function(e) {
                                if (apiURI == 'http://10.238.26.69:8080/api/') {
                                    apiURI = 'http://10.238.26.69:8080/testapi/';
                                    //$('#updateCharts').removeClass("btn-danger").addClass("btn-outline-primary ");
                                    console.log('API: DELTA');
                                    $.growl.notice({
                                        message: 'API: DELTA'
                                    });
                                    $(document).find('#sidebarLoaded > li:nth-child(1) > a').click();
                                    $(document).find('a.header-brand.changePanel').click();
                                } else {
                                    apiURI = 'http://10.238.26.69:8080/api/';
                                    //$('#updateCharts').removeClass("btn-outline-primary").addClass("btn-danger");
                                    console.log('CAMBIADO ' + apiURI);
                                    $.growl.notice({
                                        message: 'API: EPSILON'
                                    });
                                    $(document).find('#sidebarLoaded > li:nth-child(1) > a').click();
                                    $(document).find('a.header-brand.changePanel').click();
                                }
                            });

                        });

                        /** RESUMIMOS LAS LLAMADAS A LA API EN UNA MISMA FUNCION */
                        function apiCall(postData, onSuccess) {

                            var localCalls = window.localStorage.getItem("localCalls");
                            if (localCalls) {
                                localCalls = $.parseJSON('[' + localCalls + ']');
                                localCalls = localCalls[0];
                            } else {
                                localCalls = {};
                            }
                            $.ajax({
                                url: apiURI,
                                type: 'POST',
                                dataType: "json",
                                cache: false,
                                contentType: false,
                                processData: false,
                                timeout: 20000,
                                data: postData,
                                success: function(data) {
                                    if (data.scriptResp == "done") {
                                        onSuccess(data);
                                        /* for (var pair of postData.entries('meth')) {
                                            if (pair[0] == 'meth') {
                                                stamp = getNow();
                                                localCalls[stamp] = {}
                                                localCalls[stamp].meth = pair[1];
                                                localCalls[stamp].post = Array.from(postData);
                                                localCalls[stamp].back = data;
                                                window.localStorage.setItem("localCalls", JSON.stringify(localCalls));
                                            }
                                        } */
                                    } else {
                                        console.log('hubo un error en la API, contacte al equipo de soporte.');
                                        console.log(data);
                                    }
                                },
                                error: function(error) {
                                    var isAsync = 'not';
                                    for (var pair of postData.entries('meth')) {
                                        if (pair[0] == 'meth') {
                                            var thisMeth = pair[1];
                                        }
                                        if (pair[0] == 'async') {
                                            isAsync = pair[1];
                                        }
                                    }

                                    var methType = thisMeth.substring(0, 4);
                                    if (methType == 'save' && isAsync == 'not') {
                                        var pendingCalls = window.localStorage.getItem("pendingCalls");
                                        if (pendingCalls) {
                                            pendingCalls = $.parseJSON('[' + pendingCalls + ']');
                                            pendingCalls = pendingCalls[0];
                                        } else {
                                            pendingCalls = {};
                                        }
                                        stamp = getNow();
                                        moduNam = $('.page-title').html();
                                        pendingCalls[stamp] = {}
                                        pendingCalls[stamp].meth = thisMeth;
                                        pendingCalls[stamp].mod = moduNam;
                                        pendingCalls[stamp].post = Array.from(postData);
                                        pendingCalls[stamp].status = 'pending';
                                        window.localStorage.setItem("pendingCalls", JSON.stringify(pendingCalls));
                                        swal({
                                            title: "Atención",
                                            text: "Su registro no pudo ser enviado al sistema, lo hemos almacenado en la memoria del teléfono, será enviado cuando vuelva a conectarse a la Red",
                                            type: "warning",
                                            showCancelButton: false,
                                            confirmButtonText: 'Continuar',
                                            cancelButtonText: 'salir'
                                        }, function(isConfirm) {
                                            $(document).find('#updateCharts').click();
                                        });
                                    } else {
                                        var isCasted = 0;
                                        if (thisMeth != 'consultarPicking') {
                                            /** OMITIMOS EL MODULO DE PICKING EN LA COSNULTA */
                                            for (var key in localCalls) {
                                                if (localCalls[key].meth == thisMeth) {
                                                    var thisPost = Array.from(postData);
                                                    if (thisPost.equals(localCalls[key].post)) {
                                                        isCasted = 1;
                                                        onSuccess(localCalls[key].back);
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (isCasted == 0) {
                                            for (var pair of postData.entries('meth')) {
                                                console.log('POST');
                                                console.log(pair[0]);
                                                console.log(pair[1]);
                                            }
                                            console.log(error);
                                            swal({
                                                title: "Lo Sentimos",
                                                text: "No pudimos establecer una conexión con el servidor, revise su conexión e intente de nuevo",
                                                type: "error",
                                                showCancelButton: false,
                                                confirmButtonText: 'Entendido',
                                                cancelButtonText: 'salir'
                                            });
                                        }
                                    }
                                }
                            });
                        }

                        // CREAR ARREGLO DE FECHAS DIA POR DIA
                        function getNow() {
                            // CREAMOS EL RANGO DE FECHAS QUE SE MOSTRARA EN EL GRAFICO
                            var startDate = new Date("2019-11-11");
                            var today = new Date(),
                                dd = today.getDate(),
                                mm = today.getMonth() + 1,
                                yyyy = today.getFullYear();
                            if (dd < 10) {
                                dd = '0' + dd;
                            }
                            if (mm < 10) {
                                mm = '0' + mm;
                            }
                            var getting = yyyy + '-' + mm + '-' + dd;
                            var hh = today.getHours(),
                                mi = today.getMinutes(),
                                ss = today.getSeconds();
                            if (hh < 10) {
                                hh = '0' + hh;
                            }
                            if (mi < 10) {
                                mi = '0' + mi;
                            }
                            if (ss < 10) {
                                ss = '0' + ss;
                            }
                            getting += '-' + hh + '-' + mi + '-' + ss;
                            return getting.split('-').join('');
                        }

                        if (Array.prototype.equals)
                            console.warn("Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.");
                        Array.prototype.equals = function(array) {
                            if (!array)
                                return false;

                            if (this.length != array.length)
                                return false;

                            for (var i = 0, l = this.length; i < l; i++) {
                                if (this[i] instanceof Array && array[i] instanceof Array) {
                                    if (!this[i].equals(array[i]))
                                        return false;
                                } else if (this[i] != array[i]) {
                                    return false;
                                }
                            }
                            return true;
                        }
                        Object.defineProperty(Array.prototype, "equals", {
                            enumerable: false
                        });

                        Object.defineProperty(String.prototype, 'hashCode', {
                            value: function() {
                                var hash = 0,
                                    i, chr;
                                for (i = 0; i < this.length; i++) {
                                    chr = this.charCodeAt(i);
                                    hash = ((hash << 5) - hash) + chr;
                                    hash |= 0;
                                }
                                return hash;
                            }
                        });
                    </script>
                    `;

/**  ANIMAMOS LA VENTANA DE LOGIN PARA APARECER */
function showLogin(loginView = false) {
    if (!loginView) {
        loginView = loginShell;
    }
    setTimeout(function() {
        var view = populate('login', loginView);
        $('body div.page-content').html(view);
        enterSubm();
        $("#loading").toggleClass("hide");
    }, 2000);
}

/** FUNCIONALIDAD DE LOS INPUTS DE LOGIN */
function enterSubm() {
    $('.submitEnterUser').keypress(function(e) {
        if (e.which == 13) {
            $('.submitEnter').focus();
        }
    });
    $('.submitEnter').keypress(function(e) {
        if (e.which == 13) {
            $(document).find('#loginBtn').click();
        }
    });
    setTimeout(function() {
        $(document).find('.submitEnterUser').focus();
    }, 2500);
}

/** Mostramos el contenido del menu seleccionado, si no se ha seleccionado nigun menu retorna la ventana de Login */
function showPanel(p, u) {
    var userIntel = JSON.parse(window.localStorage.getItem("userIntel"));
    var formData = new FormData();
    formData.append('panel', p);
    formData.append('user', u);
    formData.append('meth', 'loadPanel');
    return $.ajax({
        url: apiURI,
        type: 'POST',
        dataType: "json",
        cache: false,
        contentType: false,
        timeout: 20000,
        processData: false,
        data: formData,
        success: function(data) {
            if (data.scriptResp == "loaded") {
                //$('body div.page-content').html('');
                $('body script.controller').remove();
                if (data.panelName != 'login') {
                    //$('body').attr("class", data.panelName + ' app sidebar-mini');
                    var view = populate(data.panelName, data.panel);
                    localizeImgs(view, function(views) {
                        if (userIntel == null) {
                            var userIntel = {};
                        }
                        $('body div.page-content').html(views);
                        //$(views).insertAfter("#loading");
                        $('body').append(data.control);
                        $('.video-background').hide();
                        userIntel.panelUsuario = data.panelName;
                        userIntel.panelView = views;
                        userIntel.panelControl = data.control;
                        window.localStorage.setItem("userIntel", JSON.stringify(userIntel));
                        $('#updateCharts').removeClass("btn-danger").addClass("btn-outline-primary ");
                        loadSideBar(userIntel.idUsuario);

                        var localPanels = window.localStorage.getItem("localPanels");
                        if (localPanels) {
                            localPanels = $.parseJSON('[' + localPanels + ']');
                            localPanels = localPanels[0];
                        } else {
                            localPanels = {};
                        }
                        localPanels[data.panelName] = {};
                        localPanels[data.panelName].view = views;
                        localPanels[data.panelName].control = data.control;
                        window.localStorage.setItem("localPanels", JSON.stringify(localPanels));
                    });
                } else {
                    showLogin(data.panel);
                }
            }
        },
        error: function(error) {
            if (userIntel) {
                if (userIntel.login == 'YES') {
                    var localPanels = window.localStorage.getItem("localPanels");
                    if (localPanels) {
                        var isListed = 0;
                        localPanels = $.parseJSON('[' + localPanels + ']');
                        localPanels = localPanels[0];
                        for (var key in localPanels) {
                            if (p == key) {
                                isListed = 1
                                $('body div.page').remove();
                                $('body script.controller').remove();
                                $('body').attr("class", p + ' app sidebar-mini');
                                var view = populate(p, localPanels[key].view);
                                $(view).insertAfter("#loading");
                                $('body').append(localPanels[key].control);
                                $('.video-background').hide();
                                userIntel.panelUsuario = key;
                                userIntel.panelView = localPanels[key].view;
                                userIntel.panelControl = localPanels[key].control;
                                window.localStorage.setItem("userIntel", JSON.stringify(userIntel));
                                $('#updateCharts').removeClass("btn-outline-primary").addClass("btn-danger");
                                loadSideBar(u);
                            }
                        }
                        if (isListed == 0) {
                            $('body div.page').remove();
                            $('body script.controller').remove();
                            $('body').attr("class", userIntel.panelUsuario + ' app sidebar-mini');
                            var view = populate(userIntel.panelUsuario, userIntel.panelView);
                            $(view).insertAfter("#loading");
                            $('body').append(userIntel.panelControl);
                            if (userIntel.panelUsuario != 'login') {
                                $('.video-background').hide();
                                $('#updateCharts').removeClass("btn-outline-primary").addClass("btn-danger");
                                loadSideBar(userIntel.idUsuario);
                                swal({
                                    title: "Lo Sentimos",
                                    text: "No pudimos establecer una conexión con el servidor, revise su internet e intente de nuevo",
                                    type: "error",
                                    showCancelButton: false,
                                    confirmButtonText: 'Entendido',
                                    cancelButtonText: 'salir'
                                });
                            } else {
                                showLogin();
                            }
                        }
                    } else {
                        $('body div.page').remove();
                        $('body script.controller').remove();
                        $('body').attr("class", userIntel.panelUsuario + ' app sidebar-mini');
                        var view = populate(userIntel.panelUsuario, userIntel.panelView);
                        $(view).insertAfter("#loading");
                        $('body').append(userIntel.panelControl);
                        if (userIntel.panelUsuario != 'login') {
                            $('.video-background').hide();
                            loadSideBar(userIntel.idUsuario);
                        } else {
                            showLogin();
                        }
                    }
                }
            } else {
                showLogin();
            }
        }
    });
}

/** EN STA FUNCION POBLAMOS LAS VARIABLES DE LAS PLANTILLAS HTML CON LOS DATOS DE NUESTRA APP */
function populate(panel, code) {
    var userIntel = window.localStorage.getItem("userIntel");
    var jsonObj = $.parseJSON('[' + userIntel + ']');
    userIntel = jsonObj[0];
    code = code.split("___DERECHOSDEAUTOR___").join('<a href="#">Join Iventario </a>© 2020. Todos los derechos reservados.');
    code = code.split("___APPNAME___").join('Sistema de Inventario');
    code = code.split("___APIURI___").join(apiURI);
    if (panel == "home") {
        return code;
    }
    if (panel == "login") {
        return code;
    }
    if (panel == "sideBar") {
        code = code.split("___PATHTOPROFILEPIC___").join(userIntel.userImg);
        code = code.split("___NOMBRESUSUARIO___").join(userIntel.nombreUsuario);
        code = code.split("___ROLUSUARIO___").join(userIntel.rolUsuario);
        code = code.split("___IDUSUARIO___").join(userIntel.idUsuario);
        return code;
    }
    if (panel == "docts") {
        code = code.split("___PATHTOPROFILEPIC___").join(userIntel.userImg);
        return code;
    }
    if (panel == "login") {
        code = code.split("___APIURI___").join(apiURI);
        return code;
    }
    if (panel == "cats") {
        return code;
    }
    if (panel == "blog") {
        return code;
    }
    if (panel == "users") {
        return code;
    }
    if (panel == "userconfig") {
        return code;
    }
    return code;
}

/** EL USUARIO DEPENDINEDO DE SU ROL RECIBE UN SIDEBAR DIFERENTE */
function loadSideBar(u) {
    console.log('obteniendo sidebar');
    var userData = JSON.parse(window.localStorage.getItem("userIntel"));
    if (userData.sidebarUsuario == undefined) {
        var formData = new FormData();
        formData.append('user', u);
        formData.append('meth', 'showSideBar');
        return $.ajax({
            url: apiURI,
            type: 'POST',
            dataType: "json",
            cache: false,
            contentType: false,
            timeout: 30000,
            processData: false,
            data: formData,
            success: function(data) {
                if (data.scriptResp == "loaded") {
                    var view = populate('sideBar', data.sideb);
                    localizeImgs(view, function(views) {
                        $('body #page').prepend(views);
                        userData.sidebarUsuario = views;
                        window.localStorage.setItem("userIntel", JSON.stringify(userData));
                        initSrc();
                        $("#loading").toggleClass("hide");
                    });
                } else {
                    console.log('hubo un error #45345345789754653');
                }
            },
            error: function(error) {
                console.log("Hubo un error de internet, intente de nuevo");
                console.log(error);
            }
        });
    } else {
        $('body #page').prepend(userData.sidebarUsuario);
        initSrc();
        $("#loading").toggleClass("hide");
    }
}

/** CARGAMOS LA FUNCIONALIDAD DEL SIDEBAR YA QUE ESTAMOS LLAMANDOLO DE FORMA ASINCRONA */
function fixsb() {
    (function() {
        "use strict";

        var slideMenu = $('.side-menu');

        // Toggle Sidebar
        $('[data-toggle="sidebar"]').click(function(event) {
            event.preventDefault();
            $('.app').toggleClass('sidenav-toggled');
        });

        if ($(window).width() > 739) {
            $('.app-sidebar').hover(function(event) {
                event.preventDefault();
                $('.app').removeClass('sidenav-toggled');
            });
        }

        // Activate sidebar slide toggle
        $("[data-toggle='slide']").click(function(event) {
            event.preventDefault();
            if (!$(this).parent().hasClass('is-expanded')) {
                slideMenu.find("[data-toggle='slide']").parent().removeClass('is-expanded');
            }
            $(this).parent().toggleClass('is-expanded');
        });

        // Set initial active toggle
        $("[data-toggle='slide.'].is-expanded").parent().toggleClass('is-expanded');

        //Activate bootstrip tooltips
        $("[data-toggle='tooltip']").tooltip();

    })();

    // searching toggle
    var sp = document.querySelector('.search-open');
    var searchbar = document.querySelector('.search-inline');
    var shclose = document.querySelector('.search-close');

    function changeClass() {
        searchbar.classList.add('search-visible');
    }

    function closesearch() {
        searchbar.classList.remove('search-visible');
    }
    sp.addEventListener('click', changeClass);
    shclose.addEventListener('click', closesearch);
}

/** RECURSOS CONVERTIDOS A LOCAL CANVAS */
function toDataUrl(url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.onload = function() {
        var reader = new FileReader();
        reader.onloadend = function() {
            callback(reader.result);
        }
        reader.readAsDataURL(xhr.response);
    };
    xhr.open('GET', url);
    xhr.responseType = 'blob';
    xhr.send();
}

function localizeImgs(dom, finished) {
    var ii = 0;
    if ($(dom).find('img').length > ii) {
        $(dom).find('img').each(function(i, n) {
            //console.log('debug LINE');
            //console.log(n);
            toDataUrl($(n).attr('src'), function(myBase64) {
                dom = dom.split($(n).attr('src')).join(myBase64);
                ii++;
                if (ii == $(dom).find('img').length) {
                    finished(dom);
                }
            });
        });
    } else {
        finished(dom);
    }
}